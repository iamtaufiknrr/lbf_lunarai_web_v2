{
  "name": "Section 1 - Product Header",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "section-1-product-header",
        "responseMode": "responseNode",
        "options": {}
      },
      "id": "webhook-trigger",
      "name": "Webhook Trigger",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300],
      "webhookId": "lbf-section-1"
    },
    {
      "parameters": {
        "jsCode": "const input = $input.first().json;\nreturn {\n  json: {\n    submissionId: input.submissionId,\n    context: input.context\n  }\n};"
      },
      "id": "extract-context",
      "name": "Extract Context",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT context_data FROM agent_memory WHERE submission_id = $1 AND section_type = 'brand_context' ORDER BY created_at DESC LIMIT 1",
        "options": {
          "queryParameters": "={{JSON.stringify([$json.submissionId])}}"
        }
      },
      "id": "retrieve-memory",
      "name": "Retrieve Memory",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [650, 300],
      "credentials": {
        "postgres": {
          "id": "postgres-main",
          "name": "LunarAI Database"
        }
      }
    },
    {
      "parameters": {
        "model": "gemini-pro",
        "prompt": "={{$json.systemPrompt}}",
        "options": {
          "temperature": 0.7,
          "maxTokens": 2048,
          "topP": 0.9,
          "topK": 40
        }
      },
      "id": "ai-agent",
      "name": "AI Agent - Gemini Pro",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1,
      "position": [850, 300],
      "credentials": {
        "googleAiApi": {
          "id": "google-ai-main",
          "name": "Google AI (Gemini)"
        }
      }
    },
    {
      "parameters": {
        "model": "gemini-pro",
        "options": {}
      },
      "id": "chat-model",
      "name": "Chat Model - Gemini",
      "type": "@n8n/n8n-nodes-langchain.lmChatGoogleGemini",
      "typeVersion": 1,
      "position": [850, 150],
      "credentials": {
        "googleAiApi": {
          "id": "google-ai-main",
          "name": "Google AI (Gemini)"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{$json.submissionId}}",
        "contextWindowLength": 10
      },
      "id": "memory-postgres",
      "name": "Memory - PostgreSQL",
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1,
      "position": [850, 450],
      "credentials": {
        "postgres": {
          "id": "postgres-main",
          "name": "LunarAI Database"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "const brandName = $json.context.brand.name;\nconst brandVoice = $json.context.brand.voice;\nconst brandValues = $json.context.brand.values;\nconst productType = $json.context.product.type;\nconst functions = $json.context.product.functions.join(', ');\nconst targetGender = $json.context.target.gender;\nconst targetAge = $json.context.target.ageRanges.join(', ');\n\nconst systemPrompt = `You are an expert product naming specialist for Indonesian cosmetic brands with 15+ years of experience.\n\nBRAND CONTEXT:\nBrand Name: ${brandName}\nBrand Voice: ${brandVoice}\nBrand Values: ${brandValues}\n\nPRODUCT CONTEXT:\nProduct Type: ${productType}\nKey Functions: ${functions}\nTarget Gender: ${targetGender}\nTarget Age: ${targetAge}\n\nTASK:\nCreate a compelling product name and tagline that:\n1. Aligns with brand voice: ${brandVoice}\n2. Reflects brand values: ${brandValues}\n3. Highlights key benefits: ${functions}\n4. Appeals to ${targetGender}, age ${targetAge}\n5. Works in Indonesian market\n6. Is memorable and unique\n\nOUTPUT FORMAT (JSON):\n{\n  \"name\": \"Product Name\",\n  \"tagline\": \"Catchy tagline\",\n  \"shortDescription\": \"Brief description (50 words)\",\n  \"rationale\": \"Why this name works\"\n}\n\nGenerate the product header now.`;\n\nreturn {\n  json: {\n    ...$ json,\n    systemPrompt\n  }\n};"
      },
      "id": "build-prompt",
      "name": "Build Prompt",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [650, 450]
    },
    {
      "parameters": {
        "jsCode": "const aiResponse = $json.output;\nlet parsedResponse;\n\ntry {\n  parsedResponse = JSON.parse(aiResponse);\n} catch (error) {\n  // If not valid JSON, extract manually\n  parsedResponse = {\n    name: aiResponse.match(/\"name\":\\s*\"([^\"]+)\"/)?.[1] || 'Product Name',\n    tagline: aiResponse.match(/\"tagline\":\\s*\"([^\"]+)\"/)?.[1] || 'Tagline',\n    shortDescription: aiResponse.match(/\"shortDescription\":\\s*\"([^\"]+)\"/)?.[1] || 'Description',\n    rationale: aiResponse.match(/\"rationale\":\\s*\"([^\"]+)\"/)?.[1] || 'Rationale'\n  };\n}\n\nreturn {\n  json: {\n    sectionType: 'productHeader',\n    submissionId: $json.submissionId,\n    content: parsedResponse,\n    metadata: {\n      model: 'gemini-pro',\n      temperature: 0.7,\n      processingTime: Date.now() - $json.startTime\n    }\n  }\n};"
      },
      "id": "format-output",
      "name": "Format Output",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO agent_memory (submission_id, section_type, context_data) VALUES ($1, $2, $3)",
        "options": {
          "queryParameters": "={{JSON.stringify([$json.submissionId, 'productHeader', JSON.stringify($json.content)])}}"
        }
      },
      "id": "store-result",
      "name": "Store Result",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [1250, 300],
      "credentials": {
        "postgres": {
          "id": "postgres-main",
          "name": "LunarAI Database"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={{JSON.stringify($json)}}"
      },
      "id": "webhook-response",
      "name": "Webhook Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1450, 300]
    }
  ],
  "connections": {
    "Webhook Trigger": {
      "main": [[{"node": "Extract Context", "type": "main", "index": 0}]]
    },
    "Extract Context": {
      "main": [[{"node": "Retrieve Memory", "type": "main", "index": 0}]]
    },
    "Retrieve Memory": {
      "main": [[{"node": "Build Prompt", "type": "main", "index": 0}]]
    },
    "Build Prompt": {
      "main": [[{"node": "AI Agent - Gemini Pro", "type": "main", "index": 0}]]
    },
    "AI Agent - Gemini Pro": {
      "main": [[{"node": "Format Output", "type": "main", "index": 0}]]
    },
    "Chat Model - Gemini": {
      "ai_languageModel": [[{"node": "AI Agent - Gemini Pro", "type": "ai_languageModel", "index": 0}]]
    },
    "Memory - PostgreSQL": {
      "ai_memory": [[{"node": "AI Agent - Gemini Pro", "type": "ai_memory", "index": 0}]]
    },
    "Format Output": {
      "main": [[{"node": "Store Result", "type": "main", "index": 0}]]
    },
    "Store Result": {
      "main": [[{"node": "Webhook Response", "type": "main", "index": 0}]]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": ["ai-agent", "section-1", "product-header"],
  "triggerCount": 1,
  "updatedAt": "2025-10-18T16:00:00.000Z",
  "versionId": "1.0.0"
}
