{
  "name": "LBF Technoglow Simulator - Main Processor",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "lbf-simulator",
        "responseMode": "responseNode",
        "options": {
          "rawBody": true
        }
      },
      "name": "Webhook Receiver",
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 1,
      "position": [250, 300],
      "webhookId": "lbf-simulator-webhook"
    },
    {
      "parameters": {
        "conditions": {
          "string": [
            {
              "value1": "={{$json.body.targetEnvironment}}",
              "operation": "equals",
              "value2": "production"
            }
          ]
        }
      },
      "name": "Check Environment",
      "type": "n8n-nodes-base.if",
      "typeVersion": 1,
      "position": [450, 300]
    },
    {
      "parameters": {
        "functionCode": "// Validate webhook signature\nconst secret = $env.N8N_WEBHOOK_SECRET;\nconst signature = $node['Webhook Receiver'].json.headers['x-webhook-secret'];\n\nif (signature !== secret) {\n  throw new Error('Invalid webhook signature');\n}\n\n// Extract and structure payload\nconst payload = $json.body;\nconst submissionId = payload.submissionId;\n\nreturn {\n  submissionId,\n  payload,\n  timestamp: new Date().toISOString(),\n  environment: payload.targetEnvironment\n};"
      },
      "name": "Validate & Extract",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [650, 300]
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "UPDATE submissions SET status = 'running', updated_at = NOW() WHERE id = '{{$json.submissionId}}'",
        "options": {}
      },
      "name": "Update Status to Running",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [850, 300],
      "credentials": {
        "postgres": {
          "id": "1",
          "name": "Neon Postgres"
        }
      }
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "INSERT INTO workflow_runs (submission_id, webhook_url, status, started_at) VALUES ('{{$json.submissionId}}', '{{$json.webhookUrl}}', 'running', NOW())",
        "options": {}
      },
      "name": "Create Workflow Run",
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 1,
      "position": [1050, 300]
    },
    {
      "parameters": {
        "functionCode": "// Orchestrator Agent - Route to specialized agents\nconst payload = $json.payload;\n\nconst tasks = [\n  { agent: 'formulation', priority: 1, data: payload.productBlueprint },\n  { agent: 'market_research', priority: 2, data: { brand: payload.brand, location: payload.productBlueprint.location } },\n  { agent: 'copywriting', priority: 3, data: { brand: payload.brand, concept: payload.concept } },\n  { agent: 'compliance', priority: 1, data: { regulatory: payload.productBlueprint.regulatoryPriority, halal: payload.productBlueprint.needsHalalCertification } }\n];\n\nreturn tasks.map(task => ({\n  submissionId: $json.submissionId,\n  agentType: task.agent,\n  priority: task.priority,\n  inputData: task.data,\n  payload: payload,\n  timestamp: new Date().toISOString()\n}));"
      },
      "name": "Orchestrator Agent",
      "type": "n8n-nodes-base.function",
      "typeVersion": 1,
      "position": [1250, 300]
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"success\": true,\n  \"submissionId\": \"{{$json.submissionId}}\",\n  \"message\": \"Submission received and processing started\",\n  \"timestamp\": \"{{$json.timestamp}}\"\n}"
      },
      "name": "Response",
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1,
      "position": [1450, 300]
    }
  ],
  "connections": {
    "Webhook Receiver": {
      "main": [[{ "node": "Check Environment", "type": "main", "index": 0 }]]
    },
    "Check Environment": {
      "main": [[{ "node": "Validate & Extract", "type": "main", "index": 0 }]]
    },
    "Validate & Extract": {
      "main": [[{ "node": "Update Status to Running", "type": "main", "index": 0 }]]
    },
    "Update Status to Running": {
      "main": [[{ "node": "Create Workflow Run", "type": "main", "index": 0 }]]
    },
    "Create Workflow Run": {
      "main": [[{ "node": "Orchestrator Agent", "type": "main", "index": 0 }]]
    },
    "Orchestrator Agent": {
      "main": [[{ "node": "Response", "type": "main", "index": 0 }]]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-10-18T10:00:00.000Z",
  "versionId": "1"
}
